# -*- coding: utf-8 -*-
"""
Created on Tue Dec  7 13:51:17 2021

@author: 100840150
"""
'''
import cv2
import matplotlib.pyplot as plt
import numpy as np
#convert into grey scale image
def grey(image):
  image=np.asarray(image)
  return cv2.cvtColor(image,cv2.COLOR_RGB2GRAY)
#Gaussian blur to reduce noise and smoothen the image
def gauss(image):
  return cv2.GaussianBlur(image,(5,5),0)
#Canny edge detection
def canny(image):
    edges = cv2.Canny(image,50,150)
    return edges
def region(image):
    height, width = image.shape
    triangle = np.array([
                       [(100, height), (475, 325), (width, height)]
                       ])
    
    mask = np.zeros_like(image)
    
    mask = cv2.fillPoly(mask, triangle, 255)
    mask = cv2.bitwise_and(image, mask)
    return mask
lines = cv2.HoughLinesP(isolated, rho=2, theta=np.pi/180, threshold=100, np.array([]), minLineLength=40, maxLineGap=5)
def average(image, lines):
    left = []
    right = []
    for line in lines:
        print(line)
        x1, y1, x2, y2 = line.reshape(4)
        parameters = np.polyfit((x1, x2), (y1, y2), 1)
        slope = parameters[0]
        y_int = parameters[1]
        if slope < 0:
            left.append((slope, y_int))
        else:
            right.append((slope, y_int))
    right_avg = np.average(right, axis=0)
    left_avg = np.average(left, axis=0)
    left_line = make_points(image, left_avg)
    right_line = make_points(image, right_avg)
    return np.array([left_line, right_line])

def make_points(image, average): 
     slope, y_int = average 
     y1 = image.shape[0]
     y2 = int(y1 * (3/5))
     x1 = int((y1 - y_int) // slope)
     x2 = int((y2 - y_int) // slope)
     return np.array([x1, y1, x2, y2])
def display_lines(image, lines):
     lines_image = np.zeros_like(image)
     if lines is not None:
       for line in lines:
         x1, y1, x2, y2 = line
         cv2.line(lines_image, (x1, y1), (x2, y2), (255, 0, 0), 10)
     return lines_image'''
 
import cv2
import os, glob
import numpy as np
from moviepy.editor import VideoFileClip
image1=imread('farm-country-road-through-the-fields-deimagine.jpg')
'''copy = np.copy(image1)
grey = grey(copy)
gaus = gauss(grey)
edges = canny(gaus,50,150)
isolated = region(edges)
lines = cv2.HoughLinesP(isolated, 2, np.pi/180, 100, np.array([]), minLineLength=40)
averaged_lines = average(copy, lines)
black_lines = display_lines(copy, averaged_lines)
lanes = cv2.addWeighted(copy, 0.8, black_lines, 1, 1)
cv2.imshow("lanes", lanes)
cv2.waitKey(0)'''

def convert_hls(image):
    return cv2.cvtColor(image, cv2.COLOR_RGB2HLS)
def select_white_yellow(image):
    converted = convert_hls(image)
    # white color mask
    lower_white = np.uint8([  0, 200,   0])
    upper_white = np.uint8([255, 255, 255])
    white_mask = cv2.inRange(converted, lower_white, upper_white)
    # yellow color mask
    lower_yellow = np.uint8([ 10,   0, 100])
    upper_yellow = np.uint8([ 40, 255, 255])
    yellow_mask = cv2.inRange(converted, lower_yellow, upper_yellow)
    # combine the mask
    mask = cv2.bitwise_or(white_mask, yellow_mask)
    return cv2.bitwise_and(image, image, mask = mask)
def hough_lines(image):
    #'image' should be the output of a Canny transform.
    #Returns hough lines (not the image with lines)
    return cv2.HoughLinesP(image, rho=1, theta=np.pi/180, threshold=20, minLineLength=20, maxLineGap=300)
from skimage.segmentation import clear_border
from skimage.io import imread
import matplotlib.pyplot as plt
plt.imshow(image1)
plt.show()
    
    
fig, axes = plt.subplots(1, 2, figsize=(8, 8))
ax = axes.flatten()

ax[0].imshow(image1, cmap="gray")
ax[0].set_axis_off()
ax[0].set_title("Original Image", fontsize=12)

ax[1].imshow(clear_border(image1), cmap="gray")
ax[1].set_axis_off()
title = 'result'
ax[1].set_title(title, fontsize=12)

fig.tight_layout()
plt.show()
